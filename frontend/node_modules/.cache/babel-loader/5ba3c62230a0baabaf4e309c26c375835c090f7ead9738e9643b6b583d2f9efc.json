{"ast":null,"code":"import api from'../lib/axios';class MovieService{async getAll(){var _response$data$_embed;const response=await api.get('/movies');return((_response$data$_embed=response.data._embedded)===null||_response$data$_embed===void 0?void 0:_response$data$_embed.domainMovieList)||[];}async getById(id){const response=await api.get(\"/movies/\".concat(id));return response.data;}async create(movie){try{const token=localStorage.getItem('token');console.log(\"üéüÔ∏è JWT Token (MovieService):\",token);// token burada loglanƒ±yor\nconst response=await api.post('/movies',movie);// token header'da mƒ±? Interceptor'a baƒülƒ±\nreturn response.status===201||response.status===200;}catch(error){var _error$response,_error$response2,_error$response3;console.error(\"üî• Film olu≈üturulurken hata:\",{message:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data,headers:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.headers});return false;}}async update(id,updatedMovie){try{const response=await api.put(\"/movies/\".concat(id),updatedMovie);return response.status===200||response.status===204;}catch(error){var _error$response4;console.error(\"Update error:\",((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message);return false;}}async delete(id){try{const response=await api.delete(\"/movies/\".concat(id));return response.status===204;}catch(error){var _error$response5;console.error(\"Film silinemedi:\",((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data)||error.message);}}}export default new MovieService();","map":{"version":3,"names":["api","MovieService","getAll","_response$data$_embed","response","get","data","_embedded","domainMovieList","getById","id","concat","create","movie","token","localStorage","getItem","console","log","post","status","error","_error$response","_error$response2","_error$response3","message","headers","update","updatedMovie","put","_error$response4","delete","_error$response5"],"sources":["/Users/umutavc/WebstormProjects/cms/src/services/MovieService.js"],"sourcesContent":["import api from '../lib/axios';\n\nclass MovieService {\n    async getAll() {\n        const response = await api.get('/movies');\n        return response.data._embedded?.domainMovieList || [];\n    }\n\n    async getById(id) {\n        const response = await api.get(`/movies/${id}`);\n        return response.data;\n    }\n\n    async create(movie) {\n        try {\n            const token = localStorage.getItem('token');\n            console.log(\"üéüÔ∏è JWT Token (MovieService):\", token); // token burada loglanƒ±yor\n\n            const response = await api.post('/movies', movie); // token header'da mƒ±? Interceptor'a baƒülƒ±\n            return response.status === 201 || response.status === 200;\n        } catch (error) {\n            console.error(\"üî• Film olu≈üturulurken hata:\", {\n                message: error.message,\n                status: error.response?.status,\n                data: error.response?.data,\n                headers: error.response?.headers\n            });\n            return false;\n        }\n    }\n\n\n\n    async update(id, updatedMovie) {\n        try {\n            const response = await api.put(`/movies/${id}`, updatedMovie);\n            return response.status === 200 || response.status === 204;\n        } catch (error) {\n            console.error(\"Update error:\", error.response?.data || error.message);\n            return false;\n        }\n    }\n\n    async delete(id) {\n        try {\n            const response = await api.delete(`/movies/${id}`);\n            return response.status === 204;\n        } catch (error) {\n            console.error(\"Film silinemedi:\", error.response?.data || error.message);\n        }\n    }\n}\n\nexport default new MovieService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}