{"ast":null,"code":"import api from '../lib/axios';\nclass SessionService {\n  // Tüm oturumları getir\n  async getAll() {\n    var _response$data$_embed;\n    const response = await api.get('/sessions');\n    return ((_response$data$_embed = response.data._embedded) === null || _response$data$_embed === void 0 ? void 0 : _response$data$_embed.domainSessionList) || [];\n  }\n\n  // ID'ye göre oturumu getir\n  async getById(id) {\n    const response = await api.get(`/sessions/${id}`);\n    return response.data;\n  }\n  async create(session) {\n    try {\n      const response = await api.post('/sessions', session);\n      return response.data;\n    } catch (err) {\n      // Opsiyonel: console.log(err.response?.data || err);\n      throw err; // Hata varsa dışarı fırlat\n    }\n  }\n\n  // Oturumu güncelle\n  async update(id, updatedSession) {\n    const response = await api.put(`/sessions/${id}`, updatedSession);\n    return response.data;\n  }\n  async reserveSeats(sessionId, seatIds) {\n    const response = await api.post(`/sessions/${sessionId}/reserve`, seatIds, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data;\n  }\n  // Oturumu sil\n  async delete(id) {\n    const response = await api.delete(`/sessions/${id}`);\n    return response.data;\n  }\n\n  // Belirli bir salonun tüm oturumlarını getir\n  async getAllSessionsFromHall(hallId) {\n    var _response$data$_embed2;\n    const response = await api.get(`/sessions/hall/${hallId}`);\n    return ((_response$data$_embed2 = response.data._embedded) === null || _response$data$_embed2 === void 0 ? void 0 : _response$data$_embed2.domainSessionList) || [];\n  }\n  async getSeatsBySessionId(sessionId) {\n    const response = await api.get(`/sessions/${sessionId}/seats`);\n    return response.data;\n  }\n  // Belirli bir filmin tüm oturumlarını getir\n  async getAllSessionsFromMovie(movieId) {\n    var _response$data$_embed3;\n    const response = await api.get(`/sessions/movie/${movieId}`);\n    return ((_response$data$_embed3 = response.data._embedded) === null || _response$data$_embed3 === void 0 ? void 0 : _response$data$_embed3.domainSessionList) || [];\n  }\n\n  // Belirli bir oturumun bitiş zamanını getir\n  async endTimeBySessionId(id) {\n    const response = await api.get(`/sessions/${id}/session/end`);\n    return response.data; // LocalDateTime string olarak gelir (örneğin: \"2025-07-27T21:00:00\")\n  }\n}\nexport default new SessionService();","map":{"version":3,"names":["api","SessionService","getAll","_response$data$_embed","response","get","data","_embedded","domainSessionList","getById","id","create","session","post","err","update","updatedSession","put","reserveSeats","sessionId","seatIds","headers","Authorization","localStorage","getItem","delete","getAllSessionsFromHall","hallId","_response$data$_embed2","getSeatsBySessionId","getAllSessionsFromMovie","movieId","_response$data$_embed3","endTimeBySessionId"],"sources":["/Users/umutavc/WebstormProjects/cms/src/services/SessionService.js"],"sourcesContent":["import api from '../lib/axios';\n\nclass SessionService {\n    // Tüm oturumları getir\n    async getAll() {\n        const response = await api.get('/sessions');\n        return response.data._embedded?.domainSessionList || [];\n    }\n\n    // ID'ye göre oturumu getir\n    async getById(id) {\n        const response = await api.get(`/sessions/${id}`);\n        return response.data;\n    }\n\n    async create(session) {\n        try {\n            const response = await api.post('/sessions', session);\n            return response.data;\n        } catch (err) {\n            // Opsiyonel: console.log(err.response?.data || err);\n            throw err; // Hata varsa dışarı fırlat\n        }\n    }\n\n    // Oturumu güncelle\n    async update(id, updatedSession) {\n        const response = await api.put(`/sessions/${id}`, updatedSession);\n        return response.data;\n    }\n    async reserveSeats(sessionId, seatIds) {\n        const response = await api.post(`/sessions/${sessionId}/reserve`, seatIds, {\n            headers: {\n                Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n        });\n        return response.data;\n    }\n    // Oturumu sil\n    async delete(id) {\n        const response = await api.delete(`/sessions/${id}`);\n        return response.data;\n    }\n\n    // Belirli bir salonun tüm oturumlarını getir\n    async getAllSessionsFromHall(hallId) {\n        const response = await api.get(`/sessions/hall/${hallId}`);\n        return response.data._embedded?.domainSessionList || [];\n    }\n    async getSeatsBySessionId(sessionId) {\n        const response = await api.get(`/sessions/${sessionId}/seats`);\n        return response.data;\n    }\n    // Belirli bir filmin tüm oturumlarını getir\n    async getAllSessionsFromMovie(movieId) {\n        const response = await api.get(`/sessions/movie/${movieId}`);\n        return response.data._embedded?.domainSessionList || [];\n    }\n\n    // Belirli bir oturumun bitiş zamanını getir\n    async endTimeBySessionId(id) {\n        const response = await api.get(`/sessions/${id}/session/end`);\n        return response.data; // LocalDateTime string olarak gelir (örneğin: \"2025-07-27T21:00:00\")\n    }\n}\n\nexport default new SessionService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}