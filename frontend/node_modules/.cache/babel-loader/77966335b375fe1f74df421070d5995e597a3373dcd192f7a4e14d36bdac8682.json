{"ast":null,"code":"import api from '../lib/axios';\nclass SessionService {\n  // GET /sessions → [ { id, movieId, hallId, startTime, … }, … ]\n  async getAll() {\n    var _response$data$_embed;\n    const response = await api.get('/sessions');\n    // eğer HAL+Spring HATEOAS kullanılmıyorsa direkt response.data olabilir\n    return ((_response$data$_embed = response.data._embedded) === null || _response$data$_embed === void 0 ? void 0 : _response$data$_embed.domainSessionList) || [];\n  }\n\n  // GET /sessions/:id → tek bir session objesi\n  async getById(id) {\n    const response = await api.get(`/sessions/${id}`);\n    return response.data;\n  }\n\n  // POST /sessions → sunucudan yeni kaydı dönüyorsa\n  async create(session) {\n    const response = await api.post('/sessions', session);\n    // eğer tek bir obje dönüyorsa:\n    return response.data;\n  }\n\n  // PUT /sessions/:id → güncellenmiş obje\n  async update(id, session) {\n    const response = await api.put(`/sessions/${id}`, session);\n    return response.data;\n  }\n\n  // DELETE /sessions/:id → silindikten sonra genelde { } veya 204 gelir\n  async delete(id) {\n    const response = await api.delete(`/sessions/${id}`);\n    return response.status === 204;\n  }\n}\nexport default new SessionService();","map":{"version":3,"names":["api","SessionService","getAll","_response$data$_embed","response","get","data","_embedded","domainSessionList","getById","id","create","session","post","update","put","delete","status"],"sources":["/Users/umutavc/WebstormProjects/cms/src/services/SessionService.js"],"sourcesContent":["import api from '../lib/axios';\n\nclass SessionService {\n    // GET /sessions → [ { id, movieId, hallId, startTime, … }, … ]\n    async getAll() {\n        const response = await api.get('/sessions');\n        // eğer HAL+Spring HATEOAS kullanılmıyorsa direkt response.data olabilir\n        return response.data._embedded?.domainSessionList || [];\n    }\n\n    // GET /sessions/:id → tek bir session objesi\n    async getById(id) {\n        const response = await api.get(`/sessions/${id}`);\n        return response.data;\n    }\n\n    // POST /sessions → sunucudan yeni kaydı dönüyorsa\n    async create(session) {\n        const response = await api.post('/sessions', session);\n        // eğer tek bir obje dönüyorsa:\n        return response.data;\n    }\n\n    // PUT /sessions/:id → güncellenmiş obje\n    async update(id, session) {\n        const response = await api.put(`/sessions/${id}`, session);\n        return response.data;\n    }\n\n    // DELETE /sessions/:id → silindikten sonra genelde { } veya 204 gelir\n    async delete(id) {\n        const response = await api.delete(`/sessions/${id}`);\n        return response.status === 204;\n    }\n}\n\nexport default new SessionService();\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAE9B,MAAMC,cAAc,CAAC;EACjB;EACA,MAAMC,MAAMA,CAAA,EAAG;IAAA,IAAAC,qBAAA;IACX,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,WAAW,CAAC;IAC3C;IACA,OAAO,EAAAF,qBAAA,GAAAC,QAAQ,CAACE,IAAI,CAACC,SAAS,cAAAJ,qBAAA,uBAAvBA,qBAAA,CAAyBK,iBAAiB,KAAI,EAAE;EAC3D;;EAEA;EACA,MAAMC,OAAOA,CAACC,EAAE,EAAE;IACd,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,aAAaK,EAAE,EAAE,CAAC;IACjD,OAAON,QAAQ,CAACE,IAAI;EACxB;;EAEA;EACA,MAAMK,MAAMA,CAACC,OAAO,EAAE;IAClB,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACa,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;IACrD;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB;;EAEA;EACA,MAAMQ,MAAMA,CAACJ,EAAE,EAAEE,OAAO,EAAE;IACtB,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACe,GAAG,CAAC,aAAaL,EAAE,EAAE,EAAEE,OAAO,CAAC;IAC1D,OAAOR,QAAQ,CAACE,IAAI;EACxB;;EAEA;EACA,MAAMU,MAAMA,CAACN,EAAE,EAAE;IACb,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACgB,MAAM,CAAC,aAAaN,EAAE,EAAE,CAAC;IACpD,OAAON,QAAQ,CAACa,MAAM,KAAK,GAAG;EAClC;AACJ;AAEA,eAAe,IAAIhB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}